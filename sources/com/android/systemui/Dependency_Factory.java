package com.android.systemui;

import android.app.AlarmManager;
import android.app.INotificationManager;
import android.app.IWallpaperManager;
import android.hardware.SensorPrivacyManager;
import android.hardware.display.NightDisplayListener;
import android.os.Handler;
import android.os.Looper;
import android.util.DisplayMetrics;
import android.view.IWindowManager;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.logging.UiEventLogger;
import com.android.internal.statusbar.IStatusBarService;
import com.android.keyguard.KeyguardSecurityModel;
import com.android.keyguard.KeyguardUpdateMonitor;
import com.android.keyguard.clock.ClockManager;
import com.android.settingslib.bluetooth.LocalBluetoothManager;
import com.android.systemui.accessibility.AccessibilityButtonModeObserver;
import com.android.systemui.accessibility.AccessibilityButtonTargetsObserver;
import com.android.systemui.accessibility.floatingmenu.AccessibilityFloatingMenuController;
import com.android.systemui.appops.AppOpsController;
import com.android.systemui.assist.AssistManager;
import com.android.systemui.broadcast.BroadcastDispatcher;
import com.android.systemui.colorextraction.SysuiColorExtractor;
import com.android.systemui.dock.DockManager;
import com.android.systemui.doze.MotoDisplayManager;
import com.android.systemui.dump.DumpManager;
import com.android.systemui.fragments.FragmentService;
import com.android.systemui.keyguard.ScreenLifecycle;
import com.android.systemui.keyguard.WakefulnessLifecycle;
import com.android.systemui.media.MediaCarouselController;
import com.android.systemui.media.dialog.MediaOutputDialogFactory;
import com.android.systemui.model.SysUiState;
import com.android.systemui.moto.DualSimIconController;
import com.android.systemui.navigationbar.NavigationBarController;
import com.android.systemui.navigationbar.NavigationBarOverlayController;
import com.android.systemui.navigationbar.NavigationModeController;
import com.android.systemui.navigationbar.gestural.EdgeBackGestureHandler;
import com.android.systemui.p006qs.QSTileHost;
import com.android.systemui.p006qs.ReduceBrightColorsController;
import com.android.systemui.p006qs.external.MotoDesktopProcessTileServices;
import com.android.systemui.plugins.ActivityStarter;
import com.android.systemui.plugins.DarkIconDispatcher;
import com.android.systemui.plugins.PluginDependencyProvider;
import com.android.systemui.plugins.VolumeDialogController;
import com.android.systemui.plugins.statusbar.StatusBarStateController;
import com.android.systemui.power.EnhancedEstimates;
import com.android.systemui.power.PowerUI;
import com.android.systemui.privacy.PrivacyItemController;
import com.android.systemui.recents.OverviewProxyService;
import com.android.systemui.recents.Recents;
import com.android.systemui.screenrecord.RecordingController;
import com.android.systemui.shared.plugins.PluginManager;
import com.android.systemui.shared.system.ActivityManagerWrapper;
import com.android.systemui.shared.system.DevicePolicyManagerWrapper;
import com.android.systemui.shared.system.PackageManagerWrapper;
import com.android.systemui.statusbar.CommandQueue;
import com.android.systemui.statusbar.FeatureFlags;
import com.android.systemui.statusbar.NotificationListener;
import com.android.systemui.statusbar.NotificationLockscreenUserManager;
import com.android.systemui.statusbar.NotificationMediaManager;
import com.android.systemui.statusbar.NotificationRemoteInputManager;
import com.android.systemui.statusbar.NotificationShadeWindowController;
import com.android.systemui.statusbar.NotificationViewHierarchyManager;
import com.android.systemui.statusbar.SmartReplyController;
import com.android.systemui.statusbar.VibratorHelper;
import com.android.systemui.statusbar.events.PrivacyDotViewController;
import com.android.systemui.statusbar.events.SystemStatusAnimationScheduler;
import com.android.systemui.statusbar.notification.NotificationEntryManager;
import com.android.systemui.statusbar.notification.NotificationFilter;
import com.android.systemui.statusbar.notification.collection.legacy.NotificationGroupManagerLegacy;
import com.android.systemui.statusbar.notification.collection.legacy.VisualStabilityManager;
import com.android.systemui.statusbar.notification.logging.NotificationLogger;
import com.android.systemui.statusbar.notification.row.NotificationGutsManager;
import com.android.systemui.statusbar.notification.stack.CliNotificationStackClient;
import com.android.systemui.statusbar.phone.AutoHideController;
import com.android.systemui.statusbar.phone.CliStatusBar;
import com.android.systemui.statusbar.phone.CliStatusBarWindowController;
import com.android.systemui.statusbar.phone.DozeParameters;
import com.android.systemui.statusbar.phone.KeyguardDismissUtil;
import com.android.systemui.statusbar.phone.LightBarController;
import com.android.systemui.statusbar.phone.LockscreenGestureLogger;
import com.android.systemui.statusbar.phone.ManagedProfileController;
import com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper;
import com.android.systemui.statusbar.phone.ShadeController;
import com.android.systemui.statusbar.phone.StatusBar;
import com.android.systemui.statusbar.phone.StatusBarContentInsetsProvider;
import com.android.systemui.statusbar.phone.StatusBarIconController;
import com.android.systemui.statusbar.phone.StatusBarWindowController;
import com.android.systemui.statusbar.policy.AccessibilityController;
import com.android.systemui.statusbar.policy.AccessibilityManagerWrapper;
import com.android.systemui.statusbar.policy.BatteryController;
import com.android.systemui.statusbar.policy.BluetoothController;
import com.android.systemui.statusbar.policy.CastController;
import com.android.systemui.statusbar.policy.ConfigurationController;
import com.android.systemui.statusbar.policy.DataSaverController;
import com.android.systemui.statusbar.policy.DeviceProvisionedController;
import com.android.systemui.statusbar.policy.ExtensionController;
import com.android.systemui.statusbar.policy.FlashlightController;
import com.android.systemui.statusbar.policy.HotspotController;
import com.android.systemui.statusbar.policy.KeyguardStateController;
import com.android.systemui.statusbar.policy.LocationController;
import com.android.systemui.statusbar.policy.NetworkController;
import com.android.systemui.statusbar.policy.NextAlarmController;
import com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler;
import com.android.systemui.statusbar.policy.RotationLockController;
import com.android.systemui.statusbar.policy.SecurityController;
import com.android.systemui.statusbar.policy.SensorPrivacyController;
import com.android.systemui.statusbar.policy.SmartReplyConstants;
import com.android.systemui.statusbar.policy.UserInfoController;
import com.android.systemui.statusbar.policy.UserSwitcherController;
import com.android.systemui.statusbar.policy.ZenModeController;
import com.android.systemui.telephony.TelephonyListenerManager;
import com.android.systemui.tracing.ProtoTracer;
import com.android.systemui.tuner.TunablePadding;
import com.android.systemui.tuner.TunerService;
import com.android.systemui.util.DeviceConfigProxy;
import com.android.systemui.util.leak.GarbageMonitor;
import com.android.systemui.util.leak.LeakDetector;
import com.android.systemui.util.leak.LeakReporter;
import com.android.systemui.util.sensors.AsyncSensorManager;
import com.motorola.rro.RROsController;
import com.motorola.systemui.cli.navgesture.CliNavGestureController;
import com.motorola.systemui.cli.navgesture.MultiUserCliNavGestures;
import com.motorola.systemui.desktop.DesktopDisplayRootModulesManager;
import com.motorola.systemui.desktop.util.TooltipPopupManager;
import com.motorola.systemui.statusbar.policy.CellLocationController;
import com.motorola.systemui.statusbar.policy.NfcController;
import com.motorola.taskbar.MotoTaskBarController;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import java.util.concurrent.Executor;
import javax.inject.Provider;

public final class Dependency_Factory implements Factory<Dependency> {
    private final Provider<AccessibilityButtonTargetsObserver> mAccessibilityButtonListControllerProvider;
    private final Provider<AccessibilityButtonModeObserver> mAccessibilityButtonModeObserverProvider;
    private final Provider<AccessibilityController> mAccessibilityControllerProvider;
    private final Provider<AccessibilityFloatingMenuController> mAccessibilityFloatingMenuControllerProvider;
    private final Provider<AccessibilityManagerWrapper> mAccessibilityManagerWrapperProvider;
    private final Provider<ActivityManagerWrapper> mActivityManagerWrapperProvider;
    private final Provider<ActivityStarter> mActivityStarterProvider;
    private final Provider<AlarmManager> mAlarmManagerProvider;
    private final Provider<AppOpsController> mAppOpsControllerProvider;
    private final Provider<AssistManager> mAssistManagerProvider;
    private final Provider<AsyncSensorManager> mAsyncSensorManagerProvider;
    private final Provider<AutoHideController> mAutoHideControllerProvider;
    private final Provider<Executor> mBackgroundExecutorProvider;
    private final Provider<BatteryController> mBatteryControllerProvider;
    private final Provider<Handler> mBgHandlerProvider;
    private final Provider<Looper> mBgLooperProvider;
    private final Provider<BluetoothController> mBluetoothControllerProvider;
    private final Provider<BroadcastDispatcher> mBroadcastDispatcherProvider;
    private final Provider<CastController> mCastControllerProvider;
    private final Provider<CellLocationController> mCellLocationControllerProvider;
    private final Provider<CliNavGestureController> mCliNavGestureControllerProvider;
    private final Provider<CliNotificationStackClient> mCliNotificationStackClientProvider;
    private final Provider<CliStatusBar> mCliStatusBarProvider;
    private final Provider<CliStatusBarWindowController> mCliStatusBarWindowControllerProvider;
    private final Provider<ClockManager> mClockManagerProvider;
    private final Provider<CommandQueue> mCommandQueueProvider;
    private final Provider<ConfigurationController> mConfigurationControllerProvider;
    private final Provider<StatusBarContentInsetsProvider> mContentInsetsProviderLazyProvider;
    private final Provider<DarkIconDispatcher> mDarkIconDispatcherProvider;
    private final Provider<DataSaverController> mDataSaverControllerProvider;
    private final Provider<DesktopDisplayRootModulesManager> mDesktopDisplayRootModulesManagerProvider;
    private final Provider<MotoDesktopProcessTileServices> mDesktopTileServicesProvider;
    private final Provider<DeviceConfigProxy> mDeviceConfigProxyProvider;
    private final Provider<DevicePolicyManagerWrapper> mDevicePolicyManagerWrapperProvider;
    private final Provider<DeviceProvisionedController> mDeviceProvisionedControllerProvider;
    private final Provider<DisplayMetrics> mDisplayMetricsProvider;
    private final Provider<DockManager> mDockManagerProvider;
    private final Provider<DozeParameters> mDozeParametersProvider;
    private final Provider<DualSimIconController> mDualSimIconControllerProvider;
    private final Provider<DumpManager> mDumpManagerProvider;
    private final Provider<EdgeBackGestureHandler.Factory> mEdgeBackGestureHandlerFactoryLazyProvider;
    private final Provider<EnhancedEstimates> mEnhancedEstimatesProvider;
    private final Provider<ExtensionController> mExtensionControllerProvider;
    private final Provider<FeatureFlags> mFeatureFlagsLazyProvider;
    private final Provider<FlashlightController> mFlashlightControllerProvider;
    private final Provider<ForegroundServiceController> mForegroundServiceControllerProvider;
    private final Provider<ForegroundServiceNotificationListener> mForegroundServiceNotificationListenerProvider;
    private final Provider<FragmentService> mFragmentServiceProvider;
    private final Provider<GarbageMonitor> mGarbageMonitorProvider;
    private final Provider<HotspotController> mHotspotControllerProvider;
    private final Provider<INotificationManager> mINotificationManagerProvider;
    private final Provider<IStatusBarService> mIStatusBarServiceProvider;
    private final Provider<IWindowManager> mIWindowManagerProvider;
    private final Provider<KeyguardDismissUtil> mKeyguardDismissUtilProvider;
    private final Provider<NotificationEntryManager.KeyguardEnvironment> mKeyguardEnvironmentProvider;
    private final Provider<KeyguardStateController> mKeyguardMonitorProvider;
    private final Provider<KeyguardSecurityModel> mKeyguardSecurityModelProvider;
    private final Provider<KeyguardUpdateMonitor> mKeyguardUpdateMonitorProvider;
    private final Provider<LeakDetector> mLeakDetectorProvider;
    private final Provider<String> mLeakReportEmailProvider;
    private final Provider<LeakReporter> mLeakReporterProvider;
    private final Provider<LightBarController> mLightBarControllerProvider;
    private final Provider<LocalBluetoothManager> mLocalBluetoothManagerProvider;
    private final Provider<LocationController> mLocationControllerProvider;
    private final Provider<LockscreenGestureLogger> mLockscreenGestureLoggerProvider;
    private final Provider<Executor> mMainExecutorProvider;
    private final Provider<Handler> mMainHandlerProvider;
    private final Provider<Looper> mMainLooperProvider;
    private final Provider<ManagedProfileController> mManagedProfileControllerProvider;
    private final Provider<MediaCarouselController> mMediaCarouselControllerProvider;
    private final Provider<MediaOutputDialogFactory> mMediaOutputDialogFactoryProvider;
    private final Provider<MetricsLogger> mMetricsLoggerProvider;
    private final Provider<MotoDisplayManager> mMotoDisplayManagerProvider;
    private final Provider<MotoTaskBarController> mMotoTaskBarControllerProvider;
    private final Provider<MultiUserCliNavGestures> mMultiUserCliNavGesturesProvider;
    private final Provider<NavigationModeController> mNavBarModeControllerProvider;
    private final Provider<NavigationBarOverlayController> mNavbarButtonsControllerLazyProvider;
    private final Provider<NavigationBarController> mNavigationBarControllerProvider;
    private final Provider<NetworkController> mNetworkControllerProvider;
    private final Provider<NextAlarmController> mNextAlarmControllerProvider;
    private final Provider<NfcController> mNfcControllerProvider;
    private final Provider<NightDisplayListener> mNightDisplayListenerProvider;
    private final Provider<NotificationEntryManager> mNotificationEntryManagerProvider;
    private final Provider<NotificationFilter> mNotificationFilterProvider;
    private final Provider<NotificationGroupAlertTransferHelper> mNotificationGroupAlertTransferHelperProvider;
    private final Provider<NotificationGroupManagerLegacy> mNotificationGroupManagerProvider;
    private final Provider<NotificationGutsManager> mNotificationGutsManagerProvider;
    private final Provider<NotificationListener> mNotificationListenerProvider;
    private final Provider<NotificationLockscreenUserManager> mNotificationLockscreenUserManagerProvider;
    private final Provider<NotificationLogger> mNotificationLoggerProvider;
    private final Provider<NotificationMediaManager> mNotificationMediaManagerProvider;
    private final Provider<NotificationRemoteInputManager.Callback> mNotificationRemoteInputManagerCallbackProvider;
    private final Provider<NotificationRemoteInputManager> mNotificationRemoteInputManagerProvider;
    private final Provider<NotificationShadeWindowController> mNotificationShadeWindowControllerProvider;
    private final Provider<NotificationViewHierarchyManager> mNotificationViewHierarchyManagerProvider;
    private final Provider<OverviewProxyService> mOverviewProxyServiceProvider;
    private final Provider<PackageManagerWrapper> mPackageManagerWrapperProvider;
    private final Provider<PluginDependencyProvider> mPluginDependencyProvider;
    private final Provider<PluginManager> mPluginManagerProvider;
    private final Provider<PrivacyDotViewController> mPrivacyDotViewControllerLazyProvider;
    private final Provider<PrivacyItemController> mPrivacyItemControllerProvider;
    private final Provider<ProtoTracer> mProtoTracerProvider;
    private final Provider<QSTileHost> mQSTileHostProvider;
    private final Provider<RROsController> mRROsControllerProvider;
    private final Provider<Recents> mRecentsProvider;
    private final Provider<RecordingController> mRecordingControllerProvider;
    private final Provider<ReduceBrightColorsController> mReduceBrightColorsControllerProvider;
    private final Provider<RemoteInputQuickSettingsDisabler> mRemoteInputQuickSettingsDisablerProvider;
    private final Provider<RotationLockController> mRotationLockControllerProvider;
    private final Provider<ScreenLifecycle> mScreenLifecycleProvider;
    private final Provider<SecurityController> mSecurityControllerProvider;
    private final Provider<SensorPrivacyController> mSensorPrivacyControllerProvider;
    private final Provider<SensorPrivacyManager> mSensorPrivacyManagerProvider;
    private final Provider<ShadeController> mShadeControllerProvider;
    private final Provider<SmartReplyConstants> mSmartReplyConstantsProvider;
    private final Provider<SmartReplyController> mSmartReplyControllerProvider;
    private final Provider<StatusBarIconController> mStatusBarIconControllerProvider;
    private final Provider<StatusBar> mStatusBarProvider;
    private final Provider<StatusBarStateController> mStatusBarStateControllerProvider;
    private final Provider<SysUiState> mSysUiStateFlagsContainerProvider;
    private final Provider<SystemStatusAnimationScheduler> mSystemStatusAnimationSchedulerLazyProvider;
    private final Provider<SysuiColorExtractor> mSysuiColorExtractorProvider;
    private final Provider<TelephonyListenerManager> mTelephonyListenerManagerProvider;
    private final Provider<StatusBarWindowController> mTempStatusBarWindowControllerProvider;
    private final Provider<Handler> mTimeTickHandlerProvider;
    private final Provider<TooltipPopupManager> mTooltipPopupManagerProvider;
    private final Provider<TunablePadding.TunablePaddingService> mTunablePaddingServiceProvider;
    private final Provider<TunerService> mTunerServiceProvider;
    private final Provider<UiEventLogger> mUiEventLoggerProvider;
    private final Provider<UiOffloadThread> mUiOffloadThreadProvider;
    private final Provider<UserInfoController> mUserInfoControllerProvider;
    private final Provider<UserSwitcherController> mUserSwitcherControllerProvider;
    private final Provider<VibratorHelper> mVibratorHelperProvider;
    private final Provider<VisualStabilityManager> mVisualStabilityManagerProvider;
    private final Provider<VolumeDialogController> mVolumeDialogControllerProvider;
    private final Provider<WakefulnessLifecycle> mWakefulnessLifecycleProvider;
    private final Provider<IWallpaperManager> mWallpaperManagerProvider;
    private final Provider<PowerUI.WarningsUI> mWarningsUIProvider;
    private final Provider<ZenModeController> mZenModeControllerProvider;

    public Dependency_Factory(Provider<DumpManager> provider, Provider<ActivityStarter> provider2, Provider<BroadcastDispatcher> provider3, Provider<AsyncSensorManager> provider4, Provider<BluetoothController> provider5, Provider<LocationController> provider6, Provider<RotationLockController> provider7, Provider<NetworkController> provider8, Provider<ZenModeController> provider9, Provider<HotspotController> provider10, Provider<CastController> provider11, Provider<FlashlightController> provider12, Provider<UserSwitcherController> provider13, Provider<UserInfoController> provider14, Provider<KeyguardStateController> provider15, Provider<KeyguardUpdateMonitor> provider16, Provider<BatteryController> provider17, Provider<NightDisplayListener> provider18, Provider<ReduceBrightColorsController> provider19, Provider<ManagedProfileController> provider20, Provider<NextAlarmController> provider21, Provider<DataSaverController> provider22, Provider<AccessibilityController> provider23, Provider<DeviceProvisionedController> provider24, Provider<PluginManager> provider25, Provider<AssistManager> provider26, Provider<SecurityController> provider27, Provider<LeakDetector> provider28, Provider<LeakReporter> provider29, Provider<GarbageMonitor> provider30, Provider<TunerService> provider31, Provider<NotificationShadeWindowController> provider32, Provider<StatusBarWindowController> provider33, Provider<CliStatusBarWindowController> provider34, Provider<DarkIconDispatcher> provider35, Provider<ConfigurationController> provider36, Provider<StatusBarIconController> provider37, Provider<ScreenLifecycle> provider38, Provider<WakefulnessLifecycle> provider39, Provider<FragmentService> provider40, Provider<ExtensionController> provider41, Provider<PluginDependencyProvider> provider42, Provider<LocalBluetoothManager> provider43, Provider<VolumeDialogController> provider44, Provider<MetricsLogger> provider45, Provider<AccessibilityManagerWrapper> provider46, Provider<SysuiColorExtractor> provider47, Provider<TunablePadding.TunablePaddingService> provider48, Provider<ForegroundServiceController> provider49, Provider<UiOffloadThread> provider50, Provider<PowerUI.WarningsUI> provider51, Provider<LightBarController> provider52, Provider<IWindowManager> provider53, Provider<OverviewProxyService> provider54, Provider<CliNotificationStackClient> provider55, Provider<NavigationModeController> provider56, Provider<AccessibilityButtonModeObserver> provider57, Provider<AccessibilityButtonTargetsObserver> provider58, Provider<EnhancedEstimates> provider59, Provider<VibratorHelper> provider60, Provider<IStatusBarService> provider61, Provider<DisplayMetrics> provider62, Provider<LockscreenGestureLogger> provider63, Provider<NotificationEntryManager.KeyguardEnvironment> provider64, Provider<ShadeController> provider65, Provider<NotificationRemoteInputManager.Callback> provider66, Provider<AppOpsController> provider67, Provider<NavigationBarController> provider68, Provider<AccessibilityFloatingMenuController> provider69, Provider<StatusBarStateController> provider70, Provider<NotificationLockscreenUserManager> provider71, Provider<NotificationGroupAlertTransferHelper> provider72, Provider<NotificationGroupManagerLegacy> provider73, Provider<VisualStabilityManager> provider74, Provider<NotificationGutsManager> provider75, Provider<NotificationMediaManager> provider76, Provider<NotificationRemoteInputManager> provider77, Provider<SmartReplyConstants> provider78, Provider<NotificationListener> provider79, Provider<NotificationLogger> provider80, Provider<NotificationViewHierarchyManager> provider81, Provider<NotificationFilter> provider82, Provider<KeyguardDismissUtil> provider83, Provider<SmartReplyController> provider84, Provider<RemoteInputQuickSettingsDisabler> provider85, Provider<NotificationEntryManager> provider86, Provider<SensorPrivacyManager> provider87, Provider<AutoHideController> provider88, Provider<ForegroundServiceNotificationListener> provider89, Provider<PrivacyItemController> provider90, Provider<Looper> provider91, Provider<Handler> provider92, Provider<Looper> provider93, Provider<Handler> provider94, Provider<Handler> provider95, Provider<String> provider96, Provider<Executor> provider97, Provider<Executor> provider98, Provider<ClockManager> provider99, Provider<ActivityManagerWrapper> provider100, Provider<DevicePolicyManagerWrapper> provider101, Provider<PackageManagerWrapper> provider102, Provider<SensorPrivacyController> provider103, Provider<DockManager> provider104, Provider<INotificationManager> provider105, Provider<SysUiState> provider106, Provider<AlarmManager> provider107, Provider<KeyguardSecurityModel> provider108, Provider<DozeParameters> provider109, Provider<IWallpaperManager> provider110, Provider<CommandQueue> provider111, Provider<Recents> provider112, Provider<StatusBar> provider113, Provider<CliStatusBar> provider114, Provider<RecordingController> provider115, Provider<ProtoTracer> provider116, Provider<MediaOutputDialogFactory> provider117, Provider<DeviceConfigProxy> provider118, Provider<NavigationBarOverlayController> provider119, Provider<TelephonyListenerManager> provider120, Provider<SystemStatusAnimationScheduler> provider121, Provider<PrivacyDotViewController> provider122, Provider<EdgeBackGestureHandler.Factory> provider123, Provider<UiEventLogger> provider124, Provider<FeatureFlags> provider125, Provider<StatusBarContentInsetsProvider> provider126, Provider<NfcController> provider127, Provider<RROsController> provider128, Provider<MotoDisplayManager> provider129, Provider<DualSimIconController> provider130, Provider<MotoTaskBarController> provider131, Provider<CellLocationController> provider132, Provider<MediaCarouselController> provider133, Provider<CliNavGestureController> provider134, Provider<MultiUserCliNavGestures> provider135, Provider<TooltipPopupManager> provider136, Provider<MotoDesktopProcessTileServices> provider137, Provider<DesktopDisplayRootModulesManager> provider138, Provider<QSTileHost> provider139) {
        this.mDumpManagerProvider = provider;
        this.mActivityStarterProvider = provider2;
        this.mBroadcastDispatcherProvider = provider3;
        this.mAsyncSensorManagerProvider = provider4;
        this.mBluetoothControllerProvider = provider5;
        this.mLocationControllerProvider = provider6;
        this.mRotationLockControllerProvider = provider7;
        this.mNetworkControllerProvider = provider8;
        this.mZenModeControllerProvider = provider9;
        this.mHotspotControllerProvider = provider10;
        this.mCastControllerProvider = provider11;
        this.mFlashlightControllerProvider = provider12;
        this.mUserSwitcherControllerProvider = provider13;
        this.mUserInfoControllerProvider = provider14;
        this.mKeyguardMonitorProvider = provider15;
        this.mKeyguardUpdateMonitorProvider = provider16;
        this.mBatteryControllerProvider = provider17;
        this.mNightDisplayListenerProvider = provider18;
        this.mReduceBrightColorsControllerProvider = provider19;
        this.mManagedProfileControllerProvider = provider20;
        this.mNextAlarmControllerProvider = provider21;
        this.mDataSaverControllerProvider = provider22;
        this.mAccessibilityControllerProvider = provider23;
        this.mDeviceProvisionedControllerProvider = provider24;
        this.mPluginManagerProvider = provider25;
        this.mAssistManagerProvider = provider26;
        this.mSecurityControllerProvider = provider27;
        this.mLeakDetectorProvider = provider28;
        this.mLeakReporterProvider = provider29;
        this.mGarbageMonitorProvider = provider30;
        this.mTunerServiceProvider = provider31;
        this.mNotificationShadeWindowControllerProvider = provider32;
        this.mTempStatusBarWindowControllerProvider = provider33;
        this.mCliStatusBarWindowControllerProvider = provider34;
        this.mDarkIconDispatcherProvider = provider35;
        this.mConfigurationControllerProvider = provider36;
        this.mStatusBarIconControllerProvider = provider37;
        this.mScreenLifecycleProvider = provider38;
        this.mWakefulnessLifecycleProvider = provider39;
        this.mFragmentServiceProvider = provider40;
        this.mExtensionControllerProvider = provider41;
        this.mPluginDependencyProvider = provider42;
        this.mLocalBluetoothManagerProvider = provider43;
        this.mVolumeDialogControllerProvider = provider44;
        this.mMetricsLoggerProvider = provider45;
        this.mAccessibilityManagerWrapperProvider = provider46;
        this.mSysuiColorExtractorProvider = provider47;
        this.mTunablePaddingServiceProvider = provider48;
        this.mForegroundServiceControllerProvider = provider49;
        this.mUiOffloadThreadProvider = provider50;
        this.mWarningsUIProvider = provider51;
        this.mLightBarControllerProvider = provider52;
        this.mIWindowManagerProvider = provider53;
        this.mOverviewProxyServiceProvider = provider54;
        this.mCliNotificationStackClientProvider = provider55;
        this.mNavBarModeControllerProvider = provider56;
        this.mAccessibilityButtonModeObserverProvider = provider57;
        this.mAccessibilityButtonListControllerProvider = provider58;
        this.mEnhancedEstimatesProvider = provider59;
        this.mVibratorHelperProvider = provider60;
        this.mIStatusBarServiceProvider = provider61;
        this.mDisplayMetricsProvider = provider62;
        this.mLockscreenGestureLoggerProvider = provider63;
        this.mKeyguardEnvironmentProvider = provider64;
        this.mShadeControllerProvider = provider65;
        this.mNotificationRemoteInputManagerCallbackProvider = provider66;
        this.mAppOpsControllerProvider = provider67;
        this.mNavigationBarControllerProvider = provider68;
        this.mAccessibilityFloatingMenuControllerProvider = provider69;
        this.mStatusBarStateControllerProvider = provider70;
        this.mNotificationLockscreenUserManagerProvider = provider71;
        this.mNotificationGroupAlertTransferHelperProvider = provider72;
        this.mNotificationGroupManagerProvider = provider73;
        this.mVisualStabilityManagerProvider = provider74;
        this.mNotificationGutsManagerProvider = provider75;
        this.mNotificationMediaManagerProvider = provider76;
        this.mNotificationRemoteInputManagerProvider = provider77;
        this.mSmartReplyConstantsProvider = provider78;
        this.mNotificationListenerProvider = provider79;
        this.mNotificationLoggerProvider = provider80;
        this.mNotificationViewHierarchyManagerProvider = provider81;
        this.mNotificationFilterProvider = provider82;
        this.mKeyguardDismissUtilProvider = provider83;
        this.mSmartReplyControllerProvider = provider84;
        this.mRemoteInputQuickSettingsDisablerProvider = provider85;
        this.mNotificationEntryManagerProvider = provider86;
        this.mSensorPrivacyManagerProvider = provider87;
        this.mAutoHideControllerProvider = provider88;
        this.mForegroundServiceNotificationListenerProvider = provider89;
        this.mPrivacyItemControllerProvider = provider90;
        this.mBgLooperProvider = provider91;
        this.mBgHandlerProvider = provider92;
        this.mMainLooperProvider = provider93;
        this.mMainHandlerProvider = provider94;
        this.mTimeTickHandlerProvider = provider95;
        this.mLeakReportEmailProvider = provider96;
        this.mMainExecutorProvider = provider97;
        this.mBackgroundExecutorProvider = provider98;
        this.mClockManagerProvider = provider99;
        this.mActivityManagerWrapperProvider = provider100;
        this.mDevicePolicyManagerWrapperProvider = provider101;
        this.mPackageManagerWrapperProvider = provider102;
        this.mSensorPrivacyControllerProvider = provider103;
        this.mDockManagerProvider = provider104;
        this.mINotificationManagerProvider = provider105;
        this.mSysUiStateFlagsContainerProvider = provider106;
        this.mAlarmManagerProvider = provider107;
        this.mKeyguardSecurityModelProvider = provider108;
        this.mDozeParametersProvider = provider109;
        this.mWallpaperManagerProvider = provider110;
        this.mCommandQueueProvider = provider111;
        this.mRecentsProvider = provider112;
        this.mStatusBarProvider = provider113;
        this.mCliStatusBarProvider = provider114;
        this.mRecordingControllerProvider = provider115;
        this.mProtoTracerProvider = provider116;
        this.mMediaOutputDialogFactoryProvider = provider117;
        this.mDeviceConfigProxyProvider = provider118;
        this.mNavbarButtonsControllerLazyProvider = provider119;
        this.mTelephonyListenerManagerProvider = provider120;
        this.mSystemStatusAnimationSchedulerLazyProvider = provider121;
        this.mPrivacyDotViewControllerLazyProvider = provider122;
        this.mEdgeBackGestureHandlerFactoryLazyProvider = provider123;
        this.mUiEventLoggerProvider = provider124;
        this.mFeatureFlagsLazyProvider = provider125;
        this.mContentInsetsProviderLazyProvider = provider126;
        this.mNfcControllerProvider = provider127;
        this.mRROsControllerProvider = provider128;
        this.mMotoDisplayManagerProvider = provider129;
        this.mDualSimIconControllerProvider = provider130;
        this.mMotoTaskBarControllerProvider = provider131;
        this.mCellLocationControllerProvider = provider132;
        this.mMediaCarouselControllerProvider = provider133;
        this.mCliNavGestureControllerProvider = provider134;
        this.mMultiUserCliNavGesturesProvider = provider135;
        this.mTooltipPopupManagerProvider = provider136;
        this.mDesktopTileServicesProvider = provider137;
        this.mDesktopDisplayRootModulesManagerProvider = provider138;
        this.mQSTileHostProvider = provider139;
    }

    public Dependency get() {
        Dependency newInstance = newInstance();
        Dependency_MembersInjector.injectMDumpManager(newInstance, this.mDumpManagerProvider.get());
        Dependency_MembersInjector.injectMActivityStarter(newInstance, DoubleCheck.lazy(this.mActivityStarterProvider));
        Dependency_MembersInjector.injectMBroadcastDispatcher(newInstance, DoubleCheck.lazy(this.mBroadcastDispatcherProvider));
        Dependency_MembersInjector.injectMAsyncSensorManager(newInstance, DoubleCheck.lazy(this.mAsyncSensorManagerProvider));
        Dependency_MembersInjector.injectMBluetoothController(newInstance, DoubleCheck.lazy(this.mBluetoothControllerProvider));
        Dependency_MembersInjector.injectMLocationController(newInstance, DoubleCheck.lazy(this.mLocationControllerProvider));
        Dependency_MembersInjector.injectMRotationLockController(newInstance, DoubleCheck.lazy(this.mRotationLockControllerProvider));
        Dependency_MembersInjector.injectMNetworkController(newInstance, DoubleCheck.lazy(this.mNetworkControllerProvider));
        Dependency_MembersInjector.injectMZenModeController(newInstance, DoubleCheck.lazy(this.mZenModeControllerProvider));
        Dependency_MembersInjector.injectMHotspotController(newInstance, DoubleCheck.lazy(this.mHotspotControllerProvider));
        Dependency_MembersInjector.injectMCastController(newInstance, DoubleCheck.lazy(this.mCastControllerProvider));
        Dependency_MembersInjector.injectMFlashlightController(newInstance, DoubleCheck.lazy(this.mFlashlightControllerProvider));
        Dependency_MembersInjector.injectMUserSwitcherController(newInstance, DoubleCheck.lazy(this.mUserSwitcherControllerProvider));
        Dependency_MembersInjector.injectMUserInfoController(newInstance, DoubleCheck.lazy(this.mUserInfoControllerProvider));
        Dependency_MembersInjector.injectMKeyguardMonitor(newInstance, DoubleCheck.lazy(this.mKeyguardMonitorProvider));
        Dependency_MembersInjector.injectMKeyguardUpdateMonitor(newInstance, DoubleCheck.lazy(this.mKeyguardUpdateMonitorProvider));
        Dependency_MembersInjector.injectMBatteryController(newInstance, DoubleCheck.lazy(this.mBatteryControllerProvider));
        Dependency_MembersInjector.injectMNightDisplayListener(newInstance, DoubleCheck.lazy(this.mNightDisplayListenerProvider));
        Dependency_MembersInjector.injectMReduceBrightColorsController(newInstance, DoubleCheck.lazy(this.mReduceBrightColorsControllerProvider));
        Dependency_MembersInjector.injectMManagedProfileController(newInstance, DoubleCheck.lazy(this.mManagedProfileControllerProvider));
        Dependency_MembersInjector.injectMNextAlarmController(newInstance, DoubleCheck.lazy(this.mNextAlarmControllerProvider));
        Dependency_MembersInjector.injectMDataSaverController(newInstance, DoubleCheck.lazy(this.mDataSaverControllerProvider));
        Dependency_MembersInjector.injectMAccessibilityController(newInstance, DoubleCheck.lazy(this.mAccessibilityControllerProvider));
        Dependency_MembersInjector.injectMDeviceProvisionedController(newInstance, DoubleCheck.lazy(this.mDeviceProvisionedControllerProvider));
        Dependency_MembersInjector.injectMPluginManager(newInstance, DoubleCheck.lazy(this.mPluginManagerProvider));
        Dependency_MembersInjector.injectMAssistManager(newInstance, DoubleCheck.lazy(this.mAssistManagerProvider));
        Dependency_MembersInjector.injectMSecurityController(newInstance, DoubleCheck.lazy(this.mSecurityControllerProvider));
        Dependency_MembersInjector.injectMLeakDetector(newInstance, DoubleCheck.lazy(this.mLeakDetectorProvider));
        Dependency_MembersInjector.injectMLeakReporter(newInstance, DoubleCheck.lazy(this.mLeakReporterProvider));
        Dependency_MembersInjector.injectMGarbageMonitor(newInstance, DoubleCheck.lazy(this.mGarbageMonitorProvider));
        Dependency_MembersInjector.injectMTunerService(newInstance, DoubleCheck.lazy(this.mTunerServiceProvider));
        Dependency_MembersInjector.injectMNotificationShadeWindowController(newInstance, DoubleCheck.lazy(this.mNotificationShadeWindowControllerProvider));
        Dependency_MembersInjector.injectMTempStatusBarWindowController(newInstance, DoubleCheck.lazy(this.mTempStatusBarWindowControllerProvider));
        Dependency_MembersInjector.injectMCliStatusBarWindowController(newInstance, DoubleCheck.lazy(this.mCliStatusBarWindowControllerProvider));
        Dependency_MembersInjector.injectMDarkIconDispatcher(newInstance, DoubleCheck.lazy(this.mDarkIconDispatcherProvider));
        Dependency_MembersInjector.injectMConfigurationController(newInstance, DoubleCheck.lazy(this.mConfigurationControllerProvider));
        Dependency_MembersInjector.injectMStatusBarIconController(newInstance, DoubleCheck.lazy(this.mStatusBarIconControllerProvider));
        Dependency_MembersInjector.injectMScreenLifecycle(newInstance, DoubleCheck.lazy(this.mScreenLifecycleProvider));
        Dependency_MembersInjector.injectMWakefulnessLifecycle(newInstance, DoubleCheck.lazy(this.mWakefulnessLifecycleProvider));
        Dependency_MembersInjector.injectMFragmentService(newInstance, DoubleCheck.lazy(this.mFragmentServiceProvider));
        Dependency_MembersInjector.injectMExtensionController(newInstance, DoubleCheck.lazy(this.mExtensionControllerProvider));
        Dependency_MembersInjector.injectMPluginDependencyProvider(newInstance, DoubleCheck.lazy(this.mPluginDependencyProvider));
        Dependency_MembersInjector.injectMLocalBluetoothManager(newInstance, DoubleCheck.lazy(this.mLocalBluetoothManagerProvider));
        Dependency_MembersInjector.injectMVolumeDialogController(newInstance, DoubleCheck.lazy(this.mVolumeDialogControllerProvider));
        Dependency_MembersInjector.injectMMetricsLogger(newInstance, DoubleCheck.lazy(this.mMetricsLoggerProvider));
        Dependency_MembersInjector.injectMAccessibilityManagerWrapper(newInstance, DoubleCheck.lazy(this.mAccessibilityManagerWrapperProvider));
        Dependency_MembersInjector.injectMSysuiColorExtractor(newInstance, DoubleCheck.lazy(this.mSysuiColorExtractorProvider));
        Dependency_MembersInjector.injectMTunablePaddingService(newInstance, DoubleCheck.lazy(this.mTunablePaddingServiceProvider));
        Dependency_MembersInjector.injectMForegroundServiceController(newInstance, DoubleCheck.lazy(this.mForegroundServiceControllerProvider));
        Dependency_MembersInjector.injectMUiOffloadThread(newInstance, DoubleCheck.lazy(this.mUiOffloadThreadProvider));
        Dependency_MembersInjector.injectMWarningsUI(newInstance, DoubleCheck.lazy(this.mWarningsUIProvider));
        Dependency_MembersInjector.injectMLightBarController(newInstance, DoubleCheck.lazy(this.mLightBarControllerProvider));
        Dependency_MembersInjector.injectMIWindowManager(newInstance, DoubleCheck.lazy(this.mIWindowManagerProvider));
        Dependency_MembersInjector.injectMOverviewProxyService(newInstance, DoubleCheck.lazy(this.mOverviewProxyServiceProvider));
        Dependency_MembersInjector.injectMCliNotificationStackClient(newInstance, DoubleCheck.lazy(this.mCliNotificationStackClientProvider));
        Dependency_MembersInjector.injectMNavBarModeController(newInstance, DoubleCheck.lazy(this.mNavBarModeControllerProvider));
        Dependency_MembersInjector.injectMAccessibilityButtonModeObserver(newInstance, DoubleCheck.lazy(this.mAccessibilityButtonModeObserverProvider));
        Dependency_MembersInjector.injectMAccessibilityButtonListController(newInstance, DoubleCheck.lazy(this.mAccessibilityButtonListControllerProvider));
        Dependency_MembersInjector.injectMEnhancedEstimates(newInstance, DoubleCheck.lazy(this.mEnhancedEstimatesProvider));
        Dependency_MembersInjector.injectMVibratorHelper(newInstance, DoubleCheck.lazy(this.mVibratorHelperProvider));
        Dependency_MembersInjector.injectMIStatusBarService(newInstance, DoubleCheck.lazy(this.mIStatusBarServiceProvider));
        Dependency_MembersInjector.injectMDisplayMetrics(newInstance, DoubleCheck.lazy(this.mDisplayMetricsProvider));
        Dependency_MembersInjector.injectMLockscreenGestureLogger(newInstance, DoubleCheck.lazy(this.mLockscreenGestureLoggerProvider));
        Dependency_MembersInjector.injectMKeyguardEnvironment(newInstance, DoubleCheck.lazy(this.mKeyguardEnvironmentProvider));
        Dependency_MembersInjector.injectMShadeController(newInstance, DoubleCheck.lazy(this.mShadeControllerProvider));
        Dependency_MembersInjector.injectMNotificationRemoteInputManagerCallback(newInstance, DoubleCheck.lazy(this.mNotificationRemoteInputManagerCallbackProvider));
        Dependency_MembersInjector.injectMAppOpsController(newInstance, DoubleCheck.lazy(this.mAppOpsControllerProvider));
        Dependency_MembersInjector.injectMNavigationBarController(newInstance, DoubleCheck.lazy(this.mNavigationBarControllerProvider));
        Dependency_MembersInjector.injectMAccessibilityFloatingMenuController(newInstance, DoubleCheck.lazy(this.mAccessibilityFloatingMenuControllerProvider));
        Dependency_MembersInjector.injectMStatusBarStateController(newInstance, DoubleCheck.lazy(this.mStatusBarStateControllerProvider));
        Dependency_MembersInjector.injectMNotificationLockscreenUserManager(newInstance, DoubleCheck.lazy(this.mNotificationLockscreenUserManagerProvider));
        Dependency_MembersInjector.injectMNotificationGroupAlertTransferHelper(newInstance, DoubleCheck.lazy(this.mNotificationGroupAlertTransferHelperProvider));
        Dependency_MembersInjector.injectMNotificationGroupManager(newInstance, DoubleCheck.lazy(this.mNotificationGroupManagerProvider));
        Dependency_MembersInjector.injectMVisualStabilityManager(newInstance, DoubleCheck.lazy(this.mVisualStabilityManagerProvider));
        Dependency_MembersInjector.injectMNotificationGutsManager(newInstance, DoubleCheck.lazy(this.mNotificationGutsManagerProvider));
        Dependency_MembersInjector.injectMNotificationMediaManager(newInstance, DoubleCheck.lazy(this.mNotificationMediaManagerProvider));
        Dependency_MembersInjector.injectMNotificationRemoteInputManager(newInstance, DoubleCheck.lazy(this.mNotificationRemoteInputManagerProvider));
        Dependency_MembersInjector.injectMSmartReplyConstants(newInstance, DoubleCheck.lazy(this.mSmartReplyConstantsProvider));
        Dependency_MembersInjector.injectMNotificationListener(newInstance, DoubleCheck.lazy(this.mNotificationListenerProvider));
        Dependency_MembersInjector.injectMNotificationLogger(newInstance, DoubleCheck.lazy(this.mNotificationLoggerProvider));
        Dependency_MembersInjector.injectMNotificationViewHierarchyManager(newInstance, DoubleCheck.lazy(this.mNotificationViewHierarchyManagerProvider));
        Dependency_MembersInjector.injectMNotificationFilter(newInstance, DoubleCheck.lazy(this.mNotificationFilterProvider));
        Dependency_MembersInjector.injectMKeyguardDismissUtil(newInstance, DoubleCheck.lazy(this.mKeyguardDismissUtilProvider));
        Dependency_MembersInjector.injectMSmartReplyController(newInstance, DoubleCheck.lazy(this.mSmartReplyControllerProvider));
        Dependency_MembersInjector.injectMRemoteInputQuickSettingsDisabler(newInstance, DoubleCheck.lazy(this.mRemoteInputQuickSettingsDisablerProvider));
        Dependency_MembersInjector.injectMNotificationEntryManager(newInstance, DoubleCheck.lazy(this.mNotificationEntryManagerProvider));
        Dependency_MembersInjector.injectMSensorPrivacyManager(newInstance, DoubleCheck.lazy(this.mSensorPrivacyManagerProvider));
        Dependency_MembersInjector.injectMAutoHideController(newInstance, DoubleCheck.lazy(this.mAutoHideControllerProvider));
        Dependency_MembersInjector.injectMForegroundServiceNotificationListener(newInstance, DoubleCheck.lazy(this.mForegroundServiceNotificationListenerProvider));
        Dependency_MembersInjector.injectMPrivacyItemController(newInstance, DoubleCheck.lazy(this.mPrivacyItemControllerProvider));
        Dependency_MembersInjector.injectMBgLooper(newInstance, DoubleCheck.lazy(this.mBgLooperProvider));
        Dependency_MembersInjector.injectMBgHandler(newInstance, DoubleCheck.lazy(this.mBgHandlerProvider));
        Dependency_MembersInjector.injectMMainLooper(newInstance, DoubleCheck.lazy(this.mMainLooperProvider));
        Dependency_MembersInjector.injectMMainHandler(newInstance, DoubleCheck.lazy(this.mMainHandlerProvider));
        Dependency_MembersInjector.injectMTimeTickHandler(newInstance, DoubleCheck.lazy(this.mTimeTickHandlerProvider));
        Dependency_MembersInjector.injectMLeakReportEmail(newInstance, DoubleCheck.lazy(this.mLeakReportEmailProvider));
        Dependency_MembersInjector.injectMMainExecutor(newInstance, DoubleCheck.lazy(this.mMainExecutorProvider));
        Dependency_MembersInjector.injectMBackgroundExecutor(newInstance, DoubleCheck.lazy(this.mBackgroundExecutorProvider));
        Dependency_MembersInjector.injectMClockManager(newInstance, DoubleCheck.lazy(this.mClockManagerProvider));
        Dependency_MembersInjector.injectMActivityManagerWrapper(newInstance, DoubleCheck.lazy(this.mActivityManagerWrapperProvider));
        Dependency_MembersInjector.injectMDevicePolicyManagerWrapper(newInstance, DoubleCheck.lazy(this.mDevicePolicyManagerWrapperProvider));
        Dependency_MembersInjector.injectMPackageManagerWrapper(newInstance, DoubleCheck.lazy(this.mPackageManagerWrapperProvider));
        Dependency_MembersInjector.injectMSensorPrivacyController(newInstance, DoubleCheck.lazy(this.mSensorPrivacyControllerProvider));
        Dependency_MembersInjector.injectMDockManager(newInstance, DoubleCheck.lazy(this.mDockManagerProvider));
        Dependency_MembersInjector.injectMINotificationManager(newInstance, DoubleCheck.lazy(this.mINotificationManagerProvider));
        Dependency_MembersInjector.injectMSysUiStateFlagsContainer(newInstance, DoubleCheck.lazy(this.mSysUiStateFlagsContainerProvider));
        Dependency_MembersInjector.injectMAlarmManager(newInstance, DoubleCheck.lazy(this.mAlarmManagerProvider));
        Dependency_MembersInjector.injectMKeyguardSecurityModel(newInstance, DoubleCheck.lazy(this.mKeyguardSecurityModelProvider));
        Dependency_MembersInjector.injectMDozeParameters(newInstance, DoubleCheck.lazy(this.mDozeParametersProvider));
        Dependency_MembersInjector.injectMWallpaperManager(newInstance, DoubleCheck.lazy(this.mWallpaperManagerProvider));
        Dependency_MembersInjector.injectMCommandQueue(newInstance, DoubleCheck.lazy(this.mCommandQueueProvider));
        Dependency_MembersInjector.injectMRecents(newInstance, DoubleCheck.lazy(this.mRecentsProvider));
        Dependency_MembersInjector.injectMStatusBar(newInstance, DoubleCheck.lazy(this.mStatusBarProvider));
        Dependency_MembersInjector.injectMCliStatusBar(newInstance, DoubleCheck.lazy(this.mCliStatusBarProvider));
        Dependency_MembersInjector.injectMRecordingController(newInstance, DoubleCheck.lazy(this.mRecordingControllerProvider));
        Dependency_MembersInjector.injectMProtoTracer(newInstance, DoubleCheck.lazy(this.mProtoTracerProvider));
        Dependency_MembersInjector.injectMMediaOutputDialogFactory(newInstance, DoubleCheck.lazy(this.mMediaOutputDialogFactoryProvider));
        Dependency_MembersInjector.injectMDeviceConfigProxy(newInstance, DoubleCheck.lazy(this.mDeviceConfigProxyProvider));
        Dependency_MembersInjector.injectMNavbarButtonsControllerLazy(newInstance, DoubleCheck.lazy(this.mNavbarButtonsControllerLazyProvider));
        Dependency_MembersInjector.injectMTelephonyListenerManager(newInstance, DoubleCheck.lazy(this.mTelephonyListenerManagerProvider));
        Dependency_MembersInjector.injectMSystemStatusAnimationSchedulerLazy(newInstance, DoubleCheck.lazy(this.mSystemStatusAnimationSchedulerLazyProvider));
        Dependency_MembersInjector.injectMPrivacyDotViewControllerLazy(newInstance, DoubleCheck.lazy(this.mPrivacyDotViewControllerLazyProvider));
        Dependency_MembersInjector.injectMEdgeBackGestureHandlerFactoryLazy(newInstance, DoubleCheck.lazy(this.mEdgeBackGestureHandlerFactoryLazyProvider));
        Dependency_MembersInjector.injectMUiEventLogger(newInstance, DoubleCheck.lazy(this.mUiEventLoggerProvider));
        Dependency_MembersInjector.injectMFeatureFlagsLazy(newInstance, DoubleCheck.lazy(this.mFeatureFlagsLazyProvider));
        Dependency_MembersInjector.injectMContentInsetsProviderLazy(newInstance, DoubleCheck.lazy(this.mContentInsetsProviderLazyProvider));
        Dependency_MembersInjector.injectMNfcController(newInstance, DoubleCheck.lazy(this.mNfcControllerProvider));
        Dependency_MembersInjector.injectMRROsController(newInstance, DoubleCheck.lazy(this.mRROsControllerProvider));
        Dependency_MembersInjector.injectMMotoDisplayManager(newInstance, DoubleCheck.lazy(this.mMotoDisplayManagerProvider));
        Dependency_MembersInjector.injectMDualSimIconController(newInstance, DoubleCheck.lazy(this.mDualSimIconControllerProvider));
        Dependency_MembersInjector.injectMMotoTaskBarController(newInstance, DoubleCheck.lazy(this.mMotoTaskBarControllerProvider));
        Dependency_MembersInjector.injectMCellLocationController(newInstance, DoubleCheck.lazy(this.mCellLocationControllerProvider));
        Dependency_MembersInjector.injectMMediaCarouselController(newInstance, DoubleCheck.lazy(this.mMediaCarouselControllerProvider));
        Dependency_MembersInjector.injectMCliNavGestureController(newInstance, DoubleCheck.lazy(this.mCliNavGestureControllerProvider));
        Dependency_MembersInjector.injectMMultiUserCliNavGestures(newInstance, DoubleCheck.lazy(this.mMultiUserCliNavGesturesProvider));
        Dependency_MembersInjector.injectMTooltipPopupManager(newInstance, DoubleCheck.lazy(this.mTooltipPopupManagerProvider));
        Dependency_MembersInjector.injectMDesktopTileServices(newInstance, DoubleCheck.lazy(this.mDesktopTileServicesProvider));
        Dependency_MembersInjector.injectMDesktopDisplayRootModulesManager(newInstance, DoubleCheck.lazy(this.mDesktopDisplayRootModulesManagerProvider));
        Dependency_MembersInjector.injectMQSTileHost(newInstance, DoubleCheck.lazy(this.mQSTileHostProvider));
        return newInstance;
    }

    public static Dependency_Factory create(Provider<DumpManager> provider, Provider<ActivityStarter> provider2, Provider<BroadcastDispatcher> provider3, Provider<AsyncSensorManager> provider4, Provider<BluetoothController> provider5, Provider<LocationController> provider6, Provider<RotationLockController> provider7, Provider<NetworkController> provider8, Provider<ZenModeController> provider9, Provider<HotspotController> provider10, Provider<CastController> provider11, Provider<FlashlightController> provider12, Provider<UserSwitcherController> provider13, Provider<UserInfoController> provider14, Provider<KeyguardStateController> provider15, Provider<KeyguardUpdateMonitor> provider16, Provider<BatteryController> provider17, Provider<NightDisplayListener> provider18, Provider<ReduceBrightColorsController> provider19, Provider<ManagedProfileController> provider20, Provider<NextAlarmController> provider21, Provider<DataSaverController> provider22, Provider<AccessibilityController> provider23, Provider<DeviceProvisionedController> provider24, Provider<PluginManager> provider25, Provider<AssistManager> provider26, Provider<SecurityController> provider27, Provider<LeakDetector> provider28, Provider<LeakReporter> provider29, Provider<GarbageMonitor> provider30, Provider<TunerService> provider31, Provider<NotificationShadeWindowController> provider32, Provider<StatusBarWindowController> provider33, Provider<CliStatusBarWindowController> provider34, Provider<DarkIconDispatcher> provider35, Provider<ConfigurationController> provider36, Provider<StatusBarIconController> provider37, Provider<ScreenLifecycle> provider38, Provider<WakefulnessLifecycle> provider39, Provider<FragmentService> provider40, Provider<ExtensionController> provider41, Provider<PluginDependencyProvider> provider42, Provider<LocalBluetoothManager> provider43, Provider<VolumeDialogController> provider44, Provider<MetricsLogger> provider45, Provider<AccessibilityManagerWrapper> provider46, Provider<SysuiColorExtractor> provider47, Provider<TunablePadding.TunablePaddingService> provider48, Provider<ForegroundServiceController> provider49, Provider<UiOffloadThread> provider50, Provider<PowerUI.WarningsUI> provider51, Provider<LightBarController> provider52, Provider<IWindowManager> provider53, Provider<OverviewProxyService> provider54, Provider<CliNotificationStackClient> provider55, Provider<NavigationModeController> provider56, Provider<AccessibilityButtonModeObserver> provider57, Provider<AccessibilityButtonTargetsObserver> provider58, Provider<EnhancedEstimates> provider59, Provider<VibratorHelper> provider60, Provider<IStatusBarService> provider61, Provider<DisplayMetrics> provider62, Provider<LockscreenGestureLogger> provider63, Provider<NotificationEntryManager.KeyguardEnvironment> provider64, Provider<ShadeController> provider65, Provider<NotificationRemoteInputManager.Callback> provider66, Provider<AppOpsController> provider67, Provider<NavigationBarController> provider68, Provider<AccessibilityFloatingMenuController> provider69, Provider<StatusBarStateController> provider70, Provider<NotificationLockscreenUserManager> provider71, Provider<NotificationGroupAlertTransferHelper> provider72, Provider<NotificationGroupManagerLegacy> provider73, Provider<VisualStabilityManager> provider74, Provider<NotificationGutsManager> provider75, Provider<NotificationMediaManager> provider76, Provider<NotificationRemoteInputManager> provider77, Provider<SmartReplyConstants> provider78, Provider<NotificationListener> provider79, Provider<NotificationLogger> provider80, Provider<NotificationViewHierarchyManager> provider81, Provider<NotificationFilter> provider82, Provider<KeyguardDismissUtil> provider83, Provider<SmartReplyController> provider84, Provider<RemoteInputQuickSettingsDisabler> provider85, Provider<NotificationEntryManager> provider86, Provider<SensorPrivacyManager> provider87, Provider<AutoHideController> provider88, Provider<ForegroundServiceNotificationListener> provider89, Provider<PrivacyItemController> provider90, Provider<Looper> provider91, Provider<Handler> provider92, Provider<Looper> provider93, Provider<Handler> provider94, Provider<Handler> provider95, Provider<String> provider96, Provider<Executor> provider97, Provider<Executor> provider98, Provider<ClockManager> provider99, Provider<ActivityManagerWrapper> provider100, Provider<DevicePolicyManagerWrapper> provider101, Provider<PackageManagerWrapper> provider102, Provider<SensorPrivacyController> provider103, Provider<DockManager> provider104, Provider<INotificationManager> provider105, Provider<SysUiState> provider106, Provider<AlarmManager> provider107, Provider<KeyguardSecurityModel> provider108, Provider<DozeParameters> provider109, Provider<IWallpaperManager> provider110, Provider<CommandQueue> provider111, Provider<Recents> provider112, Provider<StatusBar> provider113, Provider<CliStatusBar> provider114, Provider<RecordingController> provider115, Provider<ProtoTracer> provider116, Provider<MediaOutputDialogFactory> provider117, Provider<DeviceConfigProxy> provider118, Provider<NavigationBarOverlayController> provider119, Provider<TelephonyListenerManager> provider120, Provider<SystemStatusAnimationScheduler> provider121, Provider<PrivacyDotViewController> provider122, Provider<EdgeBackGestureHandler.Factory> provider123, Provider<UiEventLogger> provider124, Provider<FeatureFlags> provider125, Provider<StatusBarContentInsetsProvider> provider126, Provider<NfcController> provider127, Provider<RROsController> provider128, Provider<MotoDisplayManager> provider129, Provider<DualSimIconController> provider130, Provider<MotoTaskBarController> provider131, Provider<CellLocationController> provider132, Provider<MediaCarouselController> provider133, Provider<CliNavGestureController> provider134, Provider<MultiUserCliNavGestures> provider135, Provider<TooltipPopupManager> provider136, Provider<MotoDesktopProcessTileServices> provider137, Provider<DesktopDisplayRootModulesManager> provider138, Provider<QSTileHost> provider139) {
        return new Dependency_Factory(provider, provider2, provider3, provider4, provider5, provider6, provider7, provider8, provider9, provider10, provider11, provider12, provider13, provider14, provider15, provider16, provider17, provider18, provider19, provider20, provider21, provider22, provider23, provider24, provider25, provider26, provider27, provider28, provider29, provider30, provider31, provider32, provider33, provider34, provider35, provider36, provider37, provider38, provider39, provider40, provider41, provider42, provider43, provider44, provider45, provider46, provider47, provider48, provider49, provider50, provider51, provider52, provider53, provider54, provider55, provider56, provider57, provider58, provider59, provider60, provider61, provider62, provider63, provider64, provider65, provider66, provider67, provider68, provider69, provider70, provider71, provider72, provider73, provider74, provider75, provider76, provider77, provider78, provider79, provider80, provider81, provider82, provider83, provider84, provider85, provider86, provider87, provider88, provider89, provider90, provider91, provider92, provider93, provider94, provider95, provider96, provider97, provider98, provider99, provider100, provider101, provider102, provider103, provider104, provider105, provider106, provider107, provider108, provider109, provider110, provider111, provider112, provider113, provider114, provider115, provider116, provider117, provider118, provider119, provider120, provider121, provider122, provider123, provider124, provider125, provider126, provider127, provider128, provider129, provider130, provider131, provider132, provider133, provider134, provider135, provider136, provider137, provider138, provider139);
    }

    public static Dependency newInstance() {
        return new Dependency();
    }
}
